using System;
using System.Collections.Generic;
using Database;
using System.Xml.Serialization;
using Warehouse.ConveyorUnits;
using Warehouse.Common;
using Warehouse.Model;

namespace Warehouse.Strategy
{

    [Serializable]
    public class StrategyCraneException : Exception
    {
        public StrategyCraneException(string s) : base(s)
        { }
    }


    public class StrategyCrane : BasicStrategy
    {
        [XmlIgnore]
        public Crane Crane { get; set; }
        public string CraneName { get; set; }

        private bool PrefferedInput {get;set;}

        [XmlIgnore]
        public SimpleCraneCommand PickAction { get; set; }
        [XmlIgnore]
        public SimpleCraneCommand DropAction { get; set; }

        [XmlIgnore]
        public ConveyorIO ForcedInput { get; set; }
        private bool LastInBound { get; set; } // was last command inbound

        public StrategyCrane() : base()
        {
        }


        public override void Refresh()
        {
            // call only for in thread
            try
            {
                Strategy();
            }
            catch (Exception e)
            {
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, e.Message);
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, String.Format("{0} Refresh failed", Name));
                Warehouse.SteeringCommands.Run = false;
            }
        }

        private int Distance( Telegrams.Position p1, LPosition p2)
        {
            return Math.Abs(p1.X - p2.Travel) + Math.Abs(p1.Y - p2.Height);
        }


        private ConveyorIO BestOutput( List<ConveyorIO> list )
        {
            try
            {
                if (list.Count == 0)
                    throw new StrategyCraneException(String.Format("{0} StrategyCraneDD.BestOutput list empty", Name));
                foreach (var u in list)
                    if (u.Place == null)
                        return u;
                return list[0]; // lucky guess 
            }
            catch
            {
                throw new StrategyCraneException(String.Format("{0} StrategyCraneDD.BestOutput for {1} failed.", Name, Crane.Name));
            }
        }

        private SimpleCraneCommand GetCommandFromFreeState(bool inputPreference, bool automatic)
        {
            try
            {
                // pick pallet from input line

                var cmdInput = Crane.FindBestInput(automatic, ForcedInput);                
                var CmdWarehouse = Crane.FindBestWarehouse(automatic);

                if ((inputPreference && cmdInput != null) || (cmdInput != null && CmdWarehouse == null))
                {
                    Warehouse.DBService.AddSimpleCommand(cmdInput);
                    ForcedInput = null;
                    return cmdInput;
                }
                else if (CmdWarehouse != null)
                {
                    Warehouse.DBService.AddSimpleCommand(CmdWarehouse);
                    return CmdWarehouse;
                }

                return null;
            }
            catch (Exception ex)
            {
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, ex.Message);
                throw new StrategyCraneException(String.Format("{0} GetCommandFreeState failed", Name));
            }
        }

        private SimpleCraneCommand GetCommandFromOccupiedState(int material, bool automatic)
        {
            try
            {
                SimpleCraneCommand res = null;
                // check if outbound
                var target = Warehouse.DBService.FindFirstCommand(material, automatic);
                if (target != null)
                {
                    LPosition position = LPosition.FromString(target.Target);
                    if (!position.IsWarehouse() || (!Crane.Shelve.Contains((short)position.Shelve)))
                    {
                        res = Crane.FindBestOutput(target);
                        if (res != null)
                            Warehouse.DBService.AddSimpleCommand(res);
                    }
                    else
                        Warehouse.DBService.AddSimpleCommand(
                            res = new SimpleCraneCommand
                            {
                                Unit = Crane.Name,
                                Command_ID = target.ID,
                                Material = material,
                                Task = SimpleCommand.EnumTask.Drop,
                                Source = target.Target,
                                Status = SimpleCommand.EnumStatus.NotActive,
                                Time = DateTime.Now
                            });
                }
                return res;
            }
            catch (Exception ex)
            {
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, ex.Message);
                throw new StrategyCraneException(String.Format("{0} GetCommandFromOccupiedState failed ({1})", Name, material));
            }
        }

        private SimpleCraneCommand GetFastCommand(bool remote)
        {
            try
            {
                return Warehouse.DBService.FindFirstFastSimpleCraneCommand(Crane.Name, remote);
            }
            catch (Exception ex)
            {
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, ex.Message);
                throw new StrategyCraneException(String.Format("{0} GetFastCommand failed", Name));
            }
        }


        public override void Strategy()
        {
//            if (Crane.PLC_Status != null && !Crane.PLC_Status.Status[7])
            if (Crane.PLC_Status != null )
                Crane.FastCommand = null;
            if (!Warehouse.StrategyActive)
                return;
//            if ((!Crane.Automatic() || !Crane.Communicator.Online()))
            if ((!Crane.Remote() || !Crane.Communicator.Online()))      // ZUros
                return;
            if (!Warehouse.SteeringCommands.Run)
                return;
            if (!Crane.CheckIfAllNotified())
                return;

            try
            {
                PickAction = null;
                bool remote = Warehouse.SteeringCommands.RemoteMode;
                if (!Warehouse.SteeringCommands.AutomaticMode) // simple commands
                {

                    if (Crane.FastCommand == null)
                        Crane.FastCommand = Warehouse.DBService.FindFirstFastSimpleCraneCommand(Crane.Name, false);
//                    if (Crane.Command == null && Crane.BufferCommand == null)
                    if (Crane.Command == null && Crane.BufferCommand == null && Crane.Automatic() && !Crane.LongTermBlock())
                        Crane.Command = Warehouse.DBService.FindFirstSimpleCraneCommand(Crane.Name, false );

                    Crane.WriteAllCommandsTOPlc();
                }
                else // complex commands
                {
                    if (Crane.FastCommand == null)
                    {
                        Crane.FastCommand = Warehouse.DBService.FindFirstFastSimpleCraneCommand(Crane.Name, true);
                        Crane.WriteAllCommandsTOPlc();
                    }

//                    if (Crane.Command == null && Crane.BufferCommand == null)
                    if (Crane.Command == null && Crane.BufferCommand == null && Crane.Automatic() && !Crane.LongTermBlock())
                    {
                        Crane.Command = Warehouse.DBService.FindFirstSimpleCraneCommand(Crane.Name, true);
                        if (!(Crane.Command != null && Crane.Command.Task == SimpleCommand.EnumTask.Move))
                        {
                            if (Crane.Place != null)
                                Crane.Command = GetCommandFromOccupiedState(Crane.Place.Material, remote);
                            else
                                Crane.Command = GetCommandFromFreeState(PrefferedInput, remote);
                            if (Crane.Command != null && Crane.Command.Task == SimpleCommand.EnumTask.Pick)
                                PickAction = Crane.Command;
                            if (Crane.Command != null && Crane.Command.Task == SimpleCommand.EnumTask.Drop)
                                DropAction = Crane.Command;
                        }
                        Crane.WriteAllCommandsTOPlc(); // write all commands to PLC
                    }

                    if (Crane.BufferCommand == null && Crane.Command != null && Crane.Automatic() && !Crane.LongTermBlock())
                    {
                        if (Crane.Command.Task == SimpleCommand.EnumTask.Move)
                        {
                            // check for outbound
                            if (Crane.Place != null)
                                Crane.BufferCommand = GetCommandFromOccupiedState(Crane.Place.Material,remote);
                            else
                                Crane.BufferCommand = GetCommandFromFreeState(PrefferedInput, remote);
                        }
                        else if (Crane.Command.Task == SimpleCommand.EnumTask.Pick)
                            Crane.BufferCommand = GetCommandFromOccupiedState( Crane.Command.Material.Value, remote);
                        else if (Crane.Command.Task == SimpleCommand.EnumTask.Drop)
                            Crane.BufferCommand = GetCommandFromFreeState(PrefferedInput, remote);
                        if (Crane.BufferCommand != null && Crane.BufferCommand.Task == SimpleCommand.EnumTask.Pick)
                            PickAction = Crane.BufferCommand;
                        if (Crane.BufferCommand != null && Crane.BufferCommand.Task == SimpleCommand.EnumTask.Drop)
                            DropAction = Crane.BufferCommand;
                        Crane.WriteAllCommandsTOPlc(); // write all commands to PLC
                    }

                    // make double cycles
                    if (PickAction != null)
                        PrefferedInput = !LPosition.FromString(PickAction.Source).IsWarehouse();
                }
            }
            catch (Exception e)
            {
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, e.Message);
                throw new StrategyCraneException(String.Format("{0} Strategy failed.", Name));
            }
        }

        public override void Initialize(BasicWarehouse w)
        {
            try
            {
                Warehouse = w;
                if (CraneName == "")
                    throw new StrategyCraneException(String.Format("{0} CranName is null", Name));
                if (!w.Crane.ContainsKey(CraneName))
                    throw new StrategyCraneException(String.Format("{0} CranName={1} does is unknown.", Name, CraneName));
                Crane = w.Crane[CraneName];
                Crane.OnStrategy = Strategy;
                Crane.Communicator.OnRefresh.Add(Refresh);
            }
            catch (Exception ex)
            {
                Warehouse.AddEvent(Event.EnumSeverity.Error, Event.EnumType.Exception, ex.Message);
                throw new StrategyDoubleForkCraneException(String.Format("{0} StrategyCrane.Initialize failed", Name));
            }
        }
    }
}
