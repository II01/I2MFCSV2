//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace UserInterface.ServiceMFCS {
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMFCS.ITelegramNotify", CallbackContract=typeof(UserInterface.ServiceMFCS.ITelegramNotifyCallback))]
    public interface ITelegramNotify {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/RegisterCommunicator", ReplyAction="http://tempuri.org/ITelegramNotify/RegisterCommunicatorResponse")]
        void RegisterCommunicator(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/RegisterCommunicator", ReplyAction="http://tempuri.org/ITelegramNotify/RegisterCommunicatorResponse")]
        System.Threading.Tasks.Task RegisterCommunicatorAsync(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/UnRegisterCommunicator", ReplyAction="http://tempuri.org/ITelegramNotify/UnRegisterCommunicatorResponse")]
        void UnRegisterCommunicator(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/UnRegisterCommunicator", ReplyAction="http://tempuri.org/ITelegramNotify/UnRegisterCommunicatorResponse")]
        System.Threading.Tasks.Task UnRegisterCommunicatorAsync(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/TelegramNotifyRcv", ReplyAction="http://tempuri.org/ITelegramNotify/TelegramNotifyRcvResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramCraneStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramCraneTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportSetTime))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramLife))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramACK))]
        void TelegramNotifyRcv(Telegrams.Telegram tel, string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/TelegramNotifyRcv", ReplyAction="http://tempuri.org/ITelegramNotify/TelegramNotifyRcvResponse")]
        System.Threading.Tasks.Task TelegramNotifyRcvAsync(Telegrams.Telegram tel, string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/TelegramNotifySend", ReplyAction="http://tempuri.org/ITelegramNotify/TelegramNotifySendResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramCraneStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramCraneTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportSetTime))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramLife))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramACK))]
        void TelegramNotifySend(Telegrams.Telegram tel, string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/TelegramNotifySend", ReplyAction="http://tempuri.org/ITelegramNotify/TelegramNotifySendResponse")]
        System.Threading.Tasks.Task TelegramNotifySendAsync(Telegrams.Telegram tel, string communicatorName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITelegramNotifyCallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/ITelegramNotify/TelegramSend", ReplyAction="http://tempuri.org/ITelegramNotify/TelegramSendResponse")]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramCraneStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramCraneTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportTO))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportStatus))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramTransportSetTime))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramLife))]
        [System.ServiceModel.ServiceKnownTypeAttribute(typeof(Telegrams.TelegramACK))]
        void TelegramSend(Telegrams.Telegram tel);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface ITelegramNotifyChannel : UserInterface.ServiceMFCS.ITelegramNotify, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class TelegramNotifyClient : System.ServiceModel.DuplexClientBase<UserInterface.ServiceMFCS.ITelegramNotify>, UserInterface.ServiceMFCS.ITelegramNotify {
        
        public TelegramNotifyClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public TelegramNotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public TelegramNotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TelegramNotifyClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public TelegramNotifyClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void RegisterCommunicator(string communicatorName) {
            base.Channel.RegisterCommunicator(communicatorName);
        }
        
        public System.Threading.Tasks.Task RegisterCommunicatorAsync(string communicatorName) {
            return base.Channel.RegisterCommunicatorAsync(communicatorName);
        }
        
        public void UnRegisterCommunicator(string communicatorName) {
            base.Channel.UnRegisterCommunicator(communicatorName);
        }
        
        public System.Threading.Tasks.Task UnRegisterCommunicatorAsync(string communicatorName) {
            return base.Channel.UnRegisterCommunicatorAsync(communicatorName);
        }
        
        public void TelegramNotifyRcv(Telegrams.Telegram tel, string communicatorName) {
            base.Channel.TelegramNotifyRcv(tel, communicatorName);
        }
        
        public System.Threading.Tasks.Task TelegramNotifyRcvAsync(Telegrams.Telegram tel, string communicatorName) {
            return base.Channel.TelegramNotifyRcvAsync(tel, communicatorName);
        }
        
        public void TelegramNotifySend(Telegrams.Telegram tel, string communicatorName) {
            base.Channel.TelegramNotifySend(tel, communicatorName);
        }
        
        public System.Threading.Tasks.Task TelegramNotifySendAsync(Telegrams.Telegram tel, string communicatorName) {
            return base.Channel.TelegramNotifySendAsync(tel, communicatorName);
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="ServiceMFCS.INotifyUI", CallbackContract=typeof(UserInterface.ServiceMFCS.INotifyUICallback))]
    public interface INotifyUI {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyUI/UIRegister", ReplyAction="http://tempuri.org/INotifyUI/UIRegisterResponse")]
        void UIRegister(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyUI/UIRegister", ReplyAction="http://tempuri.org/INotifyUI/UIRegisterResponse")]
        System.Threading.Tasks.Task UIRegisterAsync(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyUI/UIUnRegister", ReplyAction="http://tempuri.org/INotifyUI/UIUnRegisterResponse")]
        void UIUnRegister(string communicatorName);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyUI/UIUnRegister", ReplyAction="http://tempuri.org/INotifyUI/UIUnRegisterResponse")]
        System.Threading.Tasks.Task UIUnRegisterAsync(string communicatorName);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyUICallback {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyUI/UIConveyorBasicUINotify", ReplyAction="http://tempuri.org/INotifyUI/UIConveyorBasicUINotifyResponse")]
        void UIConveyorBasicUINotify(Warehouse.ConveyorUnits.ConveyorBasicInfo c);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/INotifyUI/UIAddEvent", ReplyAction="http://tempuri.org/INotifyUI/UIAddEventResponse")]
        void UIAddEvent(System.DateTime time, Database.EnumEventSeverity s, Database.EnumEventType t, string text);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface INotifyUIChannel : UserInterface.ServiceMFCS.INotifyUI, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class NotifyUIClient : System.ServiceModel.DuplexClientBase<UserInterface.ServiceMFCS.INotifyUI>, UserInterface.ServiceMFCS.INotifyUI {
        
        public NotifyUIClient(System.ServiceModel.InstanceContext callbackInstance) : 
                base(callbackInstance) {
        }
        
        public NotifyUIClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName) : 
                base(callbackInstance, endpointConfigurationName) {
        }
        
        public NotifyUIClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, string remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyUIClient(System.ServiceModel.InstanceContext callbackInstance, string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, endpointConfigurationName, remoteAddress) {
        }
        
        public NotifyUIClient(System.ServiceModel.InstanceContext callbackInstance, System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(callbackInstance, binding, remoteAddress) {
        }
        
        public void UIRegister(string communicatorName) {
            base.Channel.UIRegister(communicatorName);
        }
        
        public System.Threading.Tasks.Task UIRegisterAsync(string communicatorName) {
            return base.Channel.UIRegisterAsync(communicatorName);
        }
        
        public void UIUnRegister(string communicatorName) {
            base.Channel.UIUnRegister(communicatorName);
        }
        
        public System.Threading.Tasks.Task UIUnRegisterAsync(string communicatorName) {
            return base.Channel.UIUnRegisterAsync(communicatorName);
        }
    }
}
