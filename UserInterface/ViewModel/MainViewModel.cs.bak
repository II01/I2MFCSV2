using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using GalaSoft.MvvmLight;
using GalaSoft.MvvmLight.Command;
using GalaSoft.MvvmLight.Ioc;
using GalaSoft.MvvmLight.Messaging;
using UserInterface.Services;
using System.Collections.ObjectModel;
using UserInterface.Model;
using UserInterface.ViewModel;
using UserInterface.Messages;
using System.Windows.Input;
using Infralution.Localization.Wpf;
using System.Globalization;
using System.Windows.Threading;
using Warehouse;
using System.Windows;
using System.Configuration;
using Warehouse.Model;
using Database;
using Microsoft.Practices.ServiceLocation;
using System.Diagnostics;

namespace UserInterface.ViewModel
{
    public class ViewModelBaseWithVisibility : ViewModelBase
    {
        #region members
        public Visibility _visible = Visibility.Hidden;
        #endregion

        #region properties
        public ViewModelBase View { get; set; }
        public Visibility Visible
        {
            get { return _visible; }
            set
            {
                if (_visible != value)
                {
                    _visible = value;
                    RaisePropertyChanged("Visible");
                }
            }
        }
        #endregion
    }
    public sealed class MainViewModel : ViewModelBase
    {
        #region members
        private ObservableCollection<ViewModelBaseWithVisibility> _viewModel;
        private ViewModelBase _controlPanelViewModel;
        private int _accessLevel;
        private bool _enabledAccessL1;
        private bool _enabledAccessL2;
        private string _currentTime;
        private DispatcherTimer _timer;
        #endregion

        #region properties
        public BasicWarehouse Warehouse { get; set; }
        public RelayCommand OnLoaded { get; private set; }
        public RelayCommand OnClose { get; private set; }
        public RelayCommand<object> TreeviewSelectedItemChanged { get; private set; }

        public ObservableCollection<ViewModelBaseWithVisibility> ViewModel
        {
            get { return _viewModel; }
            set
            {
                if (_viewModel != value)
                {
                    _viewModel = value;
                    RaisePropertyChanged("ViewModel");
                }
            }
        }

        public ViewModelBase ControlPanelViewModel
        {
            get
            {
                return _controlPanelViewModel;
            }
            set
            {
                if (_controlPanelViewModel != value)
                {
                    _controlPanelViewModel = value;
                    RaisePropertyChanged("ControlPanelViewModel");
                }
            }
        }

        public int AccessLevel
        {
            get
            {
                return _accessLevel;
            }
            set
            {
                if (_accessLevel != value)
                {
                    _accessLevel = value;
                    RaisePropertyChanged("AccessLevel");
                    try
                    {
                        if (_accessLevel == 1 || _accessLevel == 2)
                            EnabledAccessL1 = true;
                        else
                            EnabledAccessL1 = false;
                        if (_accessLevel == 2)
                            EnabledAccessL2 = true;
                        else
                            EnabledAccessL2 = false;
                    }
                    catch (Exception e)
                    {
                        throw new Exception(string.Format("{0}.{1}: {2}", this.GetType().Name, (new StackTrace()).GetFrame(0).GetMethod().Name, e.Message));
                    }
                }
            }
        }
        public bool EnabledAccessL1
        {
            get
            {
                return _enabledAccessL1;
            }
            set
            {
                if (_enabledAccessL1 != value)
                {
                    _enabledAccessL1 = value;
                    RaisePropertyChanged("EnabledAccessL1");
                }
            }
        }
        public bool EnabledAccessL2
        {
            get
            {
                return _enabledAccessL2;
            }
            set
            {
                if (_enabledAccessL2 != value)
                {
                    _enabledAccessL2 = value;
                    RaisePropertyChanged("EnabledAccessL2");
                }
            }
        }

        public string CurrentTime
        {
            get
            {
                return this._currentTime;
            }
            set
            {
                if (_currentTime != value)
                {
                    _currentTime = value;
                    RaisePropertyChanged("CurrentTime");
                }
            }
        }
        #endregion

        #region initialization
        public void Initialize()
        {
            BasicWarehouse dummy = new BasicWarehouse();

            try
            {
                // initialize warehouse
                dummy.UIDispatcher = Dispatcher.CurrentDispatcher;
                dummy.OnNewEvent += ((EventsViewModel)(SimpleIoc.Default.GetInstance<EventsViewModel>())).AddEvent;
                Warehouse = (BasicWarehouse)dummy.Deserialize(System.Configuration.ConfigurationManager.AppSettings["xmlconfig"]);
                Warehouse.UIDispatcher = Dispatcher.CurrentDispatcher;

                // create view models - events first
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<EventsViewModel>(), Visible = Visibility.Hidden });    // must be the first
                ((EventsViewModel)ViewModel[0].View).Initialize(Warehouse);

                Warehouse.OnNewEvent += ((EventsViewModel)(ViewModel[0].View)).AddEvent;
                Warehouse.Initialize();
                Warehouse.BuildRoutes();

                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<SettingsViewModel>(), Visible = Visibility.Hidden });
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<LocationsViewModel>(), Visible = Visibility.Hidden });
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<MaterialsViewModel>(), Visible = Visibility.Hidden });
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<SimpleCommandsViewModel>(), Visible = Visibility.Hidden });
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<CommandsViewModel>(), Visible = Visibility.Hidden });
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<VisualizationViewModel>(), Visible = Visibility.Visible });
                ViewModel.Add(new ViewModelBaseWithVisibility { View = SimpleIoc.Default.GetInstance<AlarmsViewModel>(), Visible = Visibility.Hidden });

                // intialize view models
                SimpleIoc.Default.GetInstance<SettingsViewModel>().Initialize(Warehouse);
                SimpleIoc.Default.GetInstance<LocationsViewModel>().Initialize(Warehouse);
                SimpleIoc.Default.GetInstance<MaterialsViewModel>().Initialize(Warehouse);
                SimpleIoc.Default.GetInstance<SimpleCommandsViewModel>().Initialize(Warehouse);
                SimpleIoc.Default.GetInstance<CommandsViewModel>().Initialize(Warehouse);
                SimpleIoc.Default.GetInstance<VisualizationViewModel>().Initialize(Warehouse);
                SimpleIoc.Default.GetInstance<AlarmsViewModel>().Initialize(Warehouse);

                ControlPanelViewModel = SimpleIoc.Default.GetInstance<ControlPanelViewModel>(); // must be the last
                ((ControlPanelViewModel)ControlPanelViewModel).Initialize(Warehouse);

                ReceiveAccessLevel();
                AccessLevel = 2;
            }
            catch (Exception e)
            {
                dummy.AddEvent(Database.EnumEventSeverity.Error, Database.EnumEventType.Exception, e.Message);
                throw new Exception(string.Format("{0}.{1}: {2}", this.GetType().Name, (new StackTrace()).GetFrame(0).GetMethod().Name, e.Message));
            }
        }
        public void ExecuteOnLoaded()
        {
            Initialize();
        }

        public void ExecuteOnClose()
        {
            Warehouse.StopCommunication();
        }

        public MainViewModel()
        {
            try
            {
                ViewModel = new ObservableCollection<ViewModelBaseWithVisibility>();

                OnLoaded = new RelayCommand(() => ExecuteOnLoaded());
                OnClose = new RelayCommand(() => ExecuteOnClose());
                TreeviewSelectedItemChanged = new RelayCommand<object>((param1) => ExecuteTreeviewSelectedItemChanged(param1));

                _timer = new DispatcherTimer(DispatcherPriority.Render){Interval = TimeSpan.FromSeconds(1)};
                _timer.Tick += (sender, args) => { CurrentTime = string.Format("{0} {1}", DateTime.Now.ToShortDateString(), DateTime.Now.ToLongTimeString()); };
                _timer.Start();
            }
            catch(Exception e)
            {
                throw new Exception(string.Format("{0}.{1}: {2}", this.GetType().Name, (new StackTrace()).GetFrame(0).GetMethod().Name, e.Message));
            }
        }
        #endregion

        #region functions
        private void ExecuteTreeviewSelectedItemChanged(object o)
        {
            try
            {
                foreach (var v in ViewModel)
                    v.Visible = Visibility.Hidden;
                ViewModelBaseWithVisibility vmb = ViewModel.FirstOrDefault(p => p.View == o);
                if (vmb != null)
                    vmb.Visible = Visibility.Visible;
            }
            catch (Exception e)
            {
                throw new Exception(string.Format("{0}.{1}: {2}", this.GetType().Name, (new StackTrace()).GetFrame(0).GetMethod().Name, e.Message));
            }
        }
        void ReceiveAccessLevel()
        {
            Messenger.Default.Register<MessageCommunicator>(this, (mc) => { this.AccessLevel = mc.AccessLevel; });
        }
        #endregion

    }
}
